<div id="intro" class="svc-holder">
  <h1 class="title">
    This is <b style="font-family:Rubik;">WiiLink WFC</b>!
  </h1>
  <h2 class="subtitle">
    A service that lets you go back online and play your favorite games with
    your friends on the Wii and Nintendo DS. Here you can see what people are playing, 
    and up-to-date information about each and every game!
  </h2>
  <div class="grid">
    <div
      class="grid-item"
      style="grid-column: auto / span 2; grid-row: auto / span 1; background-color:rgba(112, 112, 234, 0.078); border-color:rgba(115, 115, 167, 0.285);"
    >
      <div class="explain">
        <b style="color:white;">Join your friends online</b> and parttake in online
        races, strategy games, or even just hanging out!
      </div>
      <div class="games" id="games"></div>
      <div class="blur"></div>
    </div>
    <div class="grid-item">
      <div class="explain">
        <b style="color:white;">Participate in worldwide tournaments</b> and fight
        for your place at the leaderboard!
      </div>
      <img
        src="/img/competition.png"
        alt="Mii leaderboard"
        style="transform:translate(-200px, -250px); width:110%; position:relative;"
      />
      <div class="blur"></div>
    </div>
  </div>

  <script>
    document.addEventListener("DOMContentLoaded", async function () {
      const url = "http://violet.wiilink24.com/api/stats";
      fetch(url)
        .then((response) => response.json())
        .then((isOnline) => showService(isOnline[data[0].GamespyName])); // General stats

      function showService(isOnline) {
        let data = document.getElementById("data");
        data.innerHTML = `
      <div style="display:flex; flex-direction:row; gap:30px; width:100%;">
                    <div style="display:flex; flex-direction:column; justify-content:center; align-items:center; width:100%;">
                        <div style="font-size: 40px; font-family: Rubik; font-weight:800; color:white;">${isOnline.online}</div>
                        <div style="font-size: 15px; font-family: Rubik; color:white;"><i class="fa-solid fa-user" style="margin-right:5px;"></i> online</div>
                    </div>
                    <div style="display:flex; flex-direction:column; justify-content:center; align-items:center; width:100%;">
                        <div style="font-size: 40px; font-family: Rubik; font-weight:800; color:white;">${isOnline.active}</div>
                        <div style="font-size: 15px; font-family: Rubik; color:white;"><i class="fa-solid fa-gamepad" style="margin-right:5px;"></i> active</div>
                    </div>
                    <div style="display:flex; flex-direction:column; justify-content:center; align-items:center; width:100%;">
                        <div style="font-size: 40px; font-family: Rubik; font-weight:800; color:white;">${isOnline.groups}</div>
                        <div style="font-size: 15px; font-family: Rubik; color:white;"><i class="fa-solid fa-users-rays" style="margin-right:5px;"></i> groups</div>
                    </div>
                </div>
      `;

        // Loop through specific games
        for (let i = 1; i <= 2; i++) {
          const gameName = Object.keys(json)[i];
          const gameData = json[gameName];

          data.innerHTML += `
          <div>
            <h2>${gameName}</h2>
            <p>Online users: ${gameData.online}</p>
            <p>Active users: ${gameData.active}</p>
            <p>Groups: ${gameData.groups}</p>
          </div>
        `;
        }
      }
    });
  </script>

  <script is:inline>
    const gridItems = document.querySelectorAll(".grid-item");
    const games = document.getElementById("games");

    let icons = [
      "samba2.png",
      "uno2.png",
      "tetris2.png",
      "inazuma2.png",
      "mkw2.png",
      "chess2.png",
      "smash2.png",
      "samba2.png",
      "uno2.png",
      "tetris2.png",
      "inazuma2.png",
      "mkw2.png",
      "chess2.png",
      "smash2.png",
    ];

    for (let i = 0; i <= 15; i++) {
      games.innerHTML +=
        "<div class='game'><img src='/img/games/" +
        icons[i] +
        "' style='background-size:cover; background-attachment: fixed; background-position:center; position:relative;'height='100%;'></div>";
    }

    gridItems.forEach((item) => {
      const blur = item.querySelector(".blur");

      item.addEventListener("mousemove", function (e) {
        const rect = this.getBoundingClientRect();
        blur.style.left = e.clientX - rect.left - 50 + "px";
        blur.style.top = e.clientY - rect.top - 50 + "px";
        blur.style.display = "block";
        const x = e.clientX - rect.left;
        const skew = ((x / rect.width) * 50 - 25) / 80;
        this.style.transform = `skewY(${skew}deg)`;
      });

      item.addEventListener("mouseleave", function () {
        blur.style.display = "none";
        this.style.transform = "none";
      });
    });
  </script>

  <style>
    .blur {
      position: absolute;
      top: 0;
      left: 0;
      width: 100px;
      height: 100px;
      transform: translate(-20%, -40%) scale(400%);
      filter: blur(80px) opacity(0.05);
      background: rgb(255, 255, 255);
      border-radius: 50%;
      pointer-events: none;
      z-index: 0;
      display: none;
    }

    .grid {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(400px, 1fr));
      margin-top: 30px;
      gap: 10px;
    }

    .grid-item:hover .games {
      transform: translate(0, 0px) rotate(-8deg);
      opacity: 1;
      filter: grayscale(0);
      transition: 0.3s;
    }

    .games {
      left: -30px;
      width: 120%;
      display: grid;
      grid-template-columns: repeat(5, 1fr);
      grid-template-rows: repeat(2, 1fr);
      transform: translate(0, 20px) rotate(-8deg);
      opacity: 0.6;
      filter: grayscale(0.5);
      gap: 10px;
      z-index: 1000;
      transition: 0.3s;
      position: relative;
    }
  </style>
  <style is:global>
    .game {
      background: rgba(204, 204, 204, 0.255);
      border: 2px solid rgba(255, 255, 255, 0.183);
      box-shadow: 0px 0px 38px rgba(237, 237, 237, 0.038);
      display: flex;
      align-items: center;
      justify-content: center;
      cursor: pointer;
      border-radius: 8px;
      overflow: hidden;
      aspect-ratio: 1 / 1; /* Make the items square */
      transition: 0.1s;
    }

    .game:hover {
      transform: scale(105%);
      transform: translate(0, -5px);
      transition: 0.1s;
    }
  </style>

  <style>
    .explain {
      width: 60%;
      top: 0;
      left: 0;
      color: rgba(255, 255, 255, 0.584);
      font-family: inter;
      text-align: left;
      line-height: 40px;
      font-size: 30px;
      z-index: 1;
      position: relative;
    }

    .grid-item {
      height: 500px;
      padding: 20px;
      border: 2px solid #36363677;
      border-radius: 8px;
      box-shadow: 0px 0px 20px #0f0f0f64;
      color: white;
      border-radius: 15px;
      text-align: center;
      overflow: hidden;
      transition: 0.1s;
    }

    .grid-item:hover {
      background: rgba(57, 57, 57, 0.159);
    }

    .title {
      left: 0px;
      width: calc(100% - 50px);
      background: url(/img/header_bg.png) 0 0;
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      filter: brightness(150%);
      font-size: 60px;
      font-family: Gilroy;
      position: relative;
    }

    .slide {
      height: 400px;
      width: 300px;
      position: absolute;
    }

    .subtitle {
      color: white;
      left: 0px;
      width: 90%;
      font-size: 30px;
      position: relative;
    }

    @keyframes scroll {
      0% {
        transform: translateX(0);
      }
      100% {
        transform: translateX(calc(-450px * 5.35));
      }
    }

    @keyframes scrollback {
      0% {
        transform: translateX(calc(-450px * 5.35));
      }
      100% {
        transform: translateX(0);
      }
    }

    .svc-holder {
      top: 0px;
      left: 50%;
      transform: translate(-50%, 0);
      margin-bottom: 20px;
      width: 90%;
      max-width: 1500px;
      z-index: 0;
      position: relative;
    }

    .slider {
      height: auto;
      margin: auto;
      top: 30px;
      overflow-x: hidden;
      position: relative;
      rotate: -2deg;
      z-index: 1;
      width: 1500px;
    }

    .slider::before,
    .slider::after {
      background: linear-gradient(
        to right,
        var(--bg-color) 0%,
        rgba(255, 255, 255, 0) 100%
      );
      pointer-events: none;
      content: "";
      height: 100%;
      position: absolute;
      width: 200px;
      z-index: 2;
    }

    .slider::after {
      right: 0;
      top: 0;
      transform: rotateZ(180deg);
    }

    .slider::before {
      left: 0;
      top: 0;
    }

    .slide-track {
      animation: scroll 80s linear infinite;
      display: flex;
      width: calc(450px * 14);
    }

    .back {
      animation: scrollback 80s linear infinite;
      transform: translate(0, 100px);
      display: flex;
      flex-direction: row;
      width: calc(450px * 14);
    }

    img {
      left: 50%;
      top: 50%;
      transform: translate(-50%, -50%);
      position: absolute;
    }

    @media only screen and (max-width: 1150px) {
      .title {
        left: 20px;
      }

      .subtitle {
        left: 20px;
        width: 95%;
      }

      .svc-holder {
        width: 100%;
      }

      .grid {
        width: 100%;
        display: flex !important;
        flex-wrap: wrap !important;
        margin-top: 30px;
        gap: 10px;
      }

      .grid-item {
        width: 100%;
      }

      .slider {
        display: none;
      }

      .slide-track {
        animation: none;
      }

      .back {
        transform: translate(0, 0px);
        animation: none;
      }
      .svc-holder {
        top: 100px;
        left: 50%;
        transform: translate(-50%, 0);
        max-width: 1500px;
        z-index: 1;
        position: relative;
      }
      .slider {
        left: 50%;
        transform: translate(-50%, 0);
        width: 110%;
      }
      .slider::before,
      .slider::after {
        background: linear-gradient(
          to right,
          #ffffff80 0%,
          rgba(255, 255, 255, 0) 100%
        );
        content: "";
        height: 100%;
        position: absolute;
        width: 200px;
        z-index: 2;
      }
    }

    @media only screen and (max-width: 600px) {
      .svc-holder {
        top:0px;
      }
      .subtitle {
        font-size: 25px;
      }
      .explain {
        width: 60%;
        font-size: 25px;
      }
      .grid-item:nth-child(2) {
        height: 250px;
      }
      .grid-item:nth-child(2) .explain {
        width:95%;
      }
      .grid-item:nth-child(2) img {
        opacity:0.3;
      }
    }

    @media only screen and (min-width: 2000px) {
      .svc-holder {
        margin-top: 100px;
      }
    }
  </style>
</div>
